{"ast":null,"code":"var _jsxFileName = \"D:\\\\Practice\\\\React\\\\Practice\\\\prac1\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [number, MyNumber] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      MyNumber(prevNumber => prevNumber + 1);\n    }, 1000); // Increase the number every second (1000 milliseconds)\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(interval);\n  }, []); // Empty dependency array ensures the effect runs only once\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Number: \", number]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 8\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"HY9z2Og/OEunGmldwXoxmn+/CNY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","number","MyNumber","interval","setInterval","prevNumber","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Practice/React/Practice/prac1/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [number, MyNumber] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      MyNumber(prevNumber => prevNumber + 1);\n    }, 1000); // Increase the number every second (1000 milliseconds)\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(interval);\n  }, []); // Empty dependency array ensures the effect runs only once\n\n  return (\n    <>\n       <div>\n      <h1>Number: {number}</h1>\n\n          <button>+</button><button>-</button>\n        </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,MAAMU,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCF,QAAQ,CAACG,UAAU,IAAIA,UAAU,GAAG,CAAC,CAAC;IACxC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV;IACA,OAAO,MAAMC,aAAa,CAACH,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEP,OAAA,CAAAE,SAAA;IAAAS,QAAA,eACGX,OAAA;MAAAW,QAAA,gBACDX,OAAA;QAAAW,QAAA,GAAI,UAAQ,EAACN,MAAM;MAAA;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAErBf,OAAA;QAAAW,QAAA,EAAQ;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAAAf,OAAA;QAAAW,QAAA,EAAQ;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC;EAAC,gBACR,CAAC;AAEP;AAACX,EAAA,CArBQD,GAAG;AAAAa,EAAA,GAAHb,GAAG;AAuBZ,eAAeA,GAAG;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}